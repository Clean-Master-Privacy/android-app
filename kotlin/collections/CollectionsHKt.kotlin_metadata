// IntelliJ API Decompiler stub source generated from a class file
// Implementation of methods is not available

package kotlin.collections

internal expect fun <T> arrayOfNulls(reference: kotlin.Array<T>, size: kotlin.Int): kotlin.Array<T> { /* compiled code */ }

internal expect fun copyToArrayImpl(collection: kotlin.collections.Collection<*>): kotlin.Array<kotlin.Any?> { /* compiled code */ }

internal expect fun <T> copyToArrayImpl(collection: kotlin.collections.Collection<*>, array: kotlin.Array<T>): kotlin.Array<T> { /* compiled code */ }

internal expect fun <T> kotlin.Array<out T>.copyToArrayOfAny(isVarargs: kotlin.Boolean): kotlin.Array<out kotlin.Any?> { /* compiled code */ }

public expect fun <T, K> kotlin.collections.Grouping<T, K>.eachCount(): kotlin.collections.Map<K, kotlin.Int> { /* compiled code */ }

@kotlin.SinceKotlin public expect fun <T> kotlin.collections.MutableList<T>.fill(value: T): kotlin.Unit { /* compiled code */ }

public expect inline fun <reified T> kotlin.Array<out T>?.orEmpty(): kotlin.Array<out T> { /* compiled code */ }

@kotlin.SinceKotlin public expect fun <T> kotlin.collections.MutableList<T>.shuffle(): kotlin.Unit { /* compiled code */ }

@kotlin.SinceKotlin public expect fun <T> kotlin.collections.Iterable<T>.shuffled(): kotlin.collections.List<T> { /* compiled code */ }

public expect fun <T : kotlin.Comparable<T>> kotlin.collections.MutableList<T>.sort(): kotlin.Unit { /* compiled code */ }

public expect fun <T> kotlin.collections.MutableList<T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit { /* compiled code */ }

internal expect fun <K, V> kotlin.collections.Map<out K, V>.toSingletonMap(): kotlin.collections.Map<K, V> { /* compiled code */ }

internal expect fun <K, V> kotlin.collections.Map<K, V>.toSingletonMapOrSelf(): kotlin.collections.Map<K, V> { /* compiled code */ }

public expect inline fun <reified T> kotlin.collections.Collection<T>.toTypedArray(): kotlin.Array<T> { /* compiled code */ }

